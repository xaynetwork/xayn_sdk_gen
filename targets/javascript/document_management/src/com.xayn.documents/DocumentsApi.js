/**
 * Personalization API For Document Management
 * # Documents management For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties. The id uniquely identifies the document in the system. The system uses the snippet to create a document representation that can be matched against user interests.  It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.  The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0-rc5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteDocumentsRequest from '../model/DeleteDocumentsRequest';
import DocumentPropertiesRequest from '../model/DocumentPropertiesRequest';
import DocumentPropertiesResponse from '../model/DocumentPropertiesResponse';
import DocumentPropertyRequest from '../model/DocumentPropertyRequest';
import DocumentPropertyResponse from '../model/DocumentPropertyResponse';
import IngestionError from '../model/IngestionError';
import IngestionRequest from '../model/IngestionRequest';

/**
* Documents service.
* @module com.xayn.documents/DocumentsApi
* @version 0.0.1
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:com.xayn.documents/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentWithHttpInfo(documentId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocument");
      }

      let pathParams = {
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the document from the system.
     * Permanently deletes the document from the system. The endpoint is idempotent. Deleting a non-existing document does not produce an error.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocument(documentId) {
      return this.deleteDocumentWithHttpInfo(documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentPropertiesWithHttpInfo(documentId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocumentProperties");
      }

      let pathParams = {
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all document properties
     * Deletes all the properties of the document.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocumentProperties(documentId) {
      return this.deleteDocumentPropertiesWithHttpInfo(documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentPropertyWithHttpInfo(documentId, propertyId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocumentProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling deleteDocumentProperty");
      }

      let pathParams = {
        'document_id': documentId,
        'property_id': propertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties/{property_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a document property
     * Deletes the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocumentProperty(documentId, propertyId) {
      return this.deleteDocumentPropertyWithHttpInfo(documentId, propertyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteDocumentsRequest} opts.deleteDocumentsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDocumentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['deleteDocumentsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all listed documents.
     * Delete all documents listed in the request body. The endpoint is idempotent. I.e. if the list contains one or multiple non-existing documents, no error is produced.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteDocumentsRequest} opts.deleteDocumentsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDocuments(opts) {
      return this.deleteDocumentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentPropertiesResponse} and HTTP response
     */
    getDocumentPropertiesWithHttpInfo(documentId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentProperties");
      }

      let pathParams = {
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentPropertiesResponse;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all document properties
     * Gets all the properties of the document.
     * @param {String} documentId Id of the document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentPropertiesResponse}
     */
    getDocumentProperties(documentId) {
      return this.getDocumentPropertiesWithHttpInfo(documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a document property
     * Gets the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentPropertyResponse} and HTTP response
     */
    getDocumentPropertyWithHttpInfo(documentId, propertyId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling getDocumentProperty");
      }

      let pathParams = {
        'document_id': documentId,
        'property_id': propertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentPropertyResponse;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties/{property_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a document property
     * Gets the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentPropertyResponse}
     */
    getDocumentProperty(documentId, propertyId) {
      return this.getDocumentPropertyWithHttpInfo(documentId, propertyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/IngestionRequest} opts.ingestionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    ingestDocumentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['ingestionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add documents to the system
     * Add documents to the system. The system will create a representation of the document that will be used to match it against the preferences of a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/IngestionRequest} opts.ingestionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    ingestDocuments(opts) {
      return this.ingestDocumentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param {String} documentId Id of the document
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentPropertiesRequest} opts.documentPropertiesRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setDocumentPropertiesWithHttpInfo(documentId, opts) {
      opts = opts || {};
      let postBody = opts['documentPropertiesRequest'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling setDocumentProperties");
      }

      let pathParams = {
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set all document properties
     * Sets or replaces all the properties of the document.
     * @param {String} documentId Id of the document
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentPropertiesRequest} opts.documentPropertiesRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setDocumentProperties(documentId, opts) {
      return this.setDocumentPropertiesWithHttpInfo(documentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentPropertyRequest} opts.documentPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setDocumentPropertyWithHttpInfo(documentId, propertyId, opts) {
      opts = opts || {};
      let postBody = opts['documentPropertyRequest'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling setDocumentProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling setDocumentProperty");
      }

      let pathParams = {
        'document_id': documentId,
        'property_id': propertyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/documents/{document_id}/properties/{property_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set a document property
     * Sets or replaces the property of the document.
     * @param {String} documentId Id of the document
     * @param {String} propertyId Id of the document property
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentPropertyRequest} opts.documentPropertyRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setDocumentProperty(documentId, propertyId, opts) {
      return this.setDocumentPropertyWithHttpInfo(documentId, propertyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
