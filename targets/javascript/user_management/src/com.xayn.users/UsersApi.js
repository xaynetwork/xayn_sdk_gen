/**
 * Personalization API For User Management
 * # User management The system identifies a user with only an id. There are two main endpoints: one that allows registering an interaction between a user and a document (a user clicked or liked a document), and one to retrieve a personalized set of documents for the user. The system needs a few user interactions with documents before it can generate a personalized list.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0-rc5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PersonalizedDocumentsError from '../model/PersonalizedDocumentsError';
import PersonalizedDocumentsResponse from '../model/PersonalizedDocumentsResponse';
import UserInteractionError from '../model/UserInteractionError';
import UserInteractionRequest from '../model/UserInteractionRequest';

/**
* Users service.
* @module com.xayn.users/UsersApi
* @version 0.0.1
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:com.xayn.users/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add interaction between a user and a document
     * The interaction is used to provide personalized documents to the user.
     * @param {String} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInteractionRequest} opts.userInteractionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    documentInteractionWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = opts['userInteractionRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling documentInteraction");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/interactions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add interaction between a user and a document
     * The interaction is used to provide personalized documents to the user.
     * @param {String} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInteractionRequest} opts.userInteractionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    documentInteraction(userId, opts) {
      return this.documentInteractionWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get personalized documents for the user
     * Returns a list of documents personalized for the given `user_id`. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
     * @param {String} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Maximum number of personalized documents to return (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PersonalizedDocumentsResponse} and HTTP response
     */
    getPersonalizedDocumentsWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPersonalizedDocuments");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalizedDocumentsResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/personalized_documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get personalized documents for the user
     * Returns a list of documents personalized for the given `user_id`. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
     * @param {String} userId Id of the user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Maximum number of personalized documents to return (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PersonalizedDocumentsResponse}
     */
    getPersonalizedDocuments(userId, opts) {
      return this.getPersonalizedDocumentsWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
