/**
 * Personalization API For User Management
 * # User management The system identifies a user with only an id. There are two main endpoints: one that allows registering an interaction between a user and a document (a user clicked or liked a document), and one to retrieve a personalized set of documents for the user. The system needs a few user interactions with documents before it can generate a personalized list.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0-rc5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonalizedDocumentData from './PersonalizedDocumentData';

/**
 * The PersonalizedDocumentsResponse model module.
 * @module model/PersonalizedDocumentsResponse
 * @version 0.0.1
 */
class PersonalizedDocumentsResponse {
    /**
     * Constructs a new <code>PersonalizedDocumentsResponse</code>.
     * @alias module:model/PersonalizedDocumentsResponse
     * @param documents {Array.<module:model/PersonalizedDocumentData>} 
     */
    constructor(documents) { 
        
        PersonalizedDocumentsResponse.initialize(this, documents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents) { 
        obj['documents'] = documents;
    }

    /**
     * Constructs a <code>PersonalizedDocumentsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalizedDocumentsResponse} obj Optional instance to populate.
     * @return {module:model/PersonalizedDocumentsResponse} The populated <code>PersonalizedDocumentsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalizedDocumentsResponse();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [PersonalizedDocumentData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalizedDocumentsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalizedDocumentsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonalizedDocumentsResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                PersonalizedDocumentData.validateJsonObject(item);
            };
        }

        return true;
    }


}

PersonalizedDocumentsResponse.RequiredProperties = ["documents"];

/**
 * @member {Array.<module:model/PersonalizedDocumentData>} documents
 */
PersonalizedDocumentsResponse.prototype['documents'] = undefined;






export default PersonalizedDocumentsResponse;

