/**
 * Personalization API For Document Management
 * # Documents management For this system, a document is anything that has an id, a snippet, and an arbitrary set of properties. The id uniquely identifies the document in the system. The system uses the snippet to create a document representation that can be matched against user interests.  It is possible to attach any properties to a document; the system will not use them but will be returned together with the document when asking for personalized documents for a user. They could help store information like a title and the URL where it is possible to find the document. Each document can have its own set of properties.  The API offers an endpoint that allows uploading the documents to the system. After a successful upload, it will be possible to use the document in other endpoints.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0-rc5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", process.cwd() + "/src/index"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require(process.cwd() + "/src/index"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XaynUserManagementSdk);
  }
})(this, function (expect, XaynUserManagementSdk) {
  "use strict";

  var api;

  beforeEach(function () {
    let client = new XaynUserManagementSdk.ApiClient(
      process.env.npm_config_endpoint
    );
    let api_key = client.authentications["ApiKeyAuth"];
    api_key.apiKey = process.env.npm_config_token;

    api = new XaynUserManagementSdk.UsersApi(client);
  });

  describe("UsersApi", function () {
    describe("documentInteraction", function () {
      it("should call documentInteraction successfully", function (done) {
        api
          .documentInteraction("xayn_test_user", {
            userInteractionRequest: {
              documents: [
                {
                  id: "test_A",
                  type: "positive",
                },
                {
                  id: "test_B",
                  type: "positive",
                },
              ],
            },
          })
          .then((result) => {
            expect(result).to.be(null);
            done();
          });
      });
    });
    describe("getPersonalizedDocuments", function () {
      it("should call getPersonalizedDocuments successfully", function (done) {
        api
          .getPersonalizedDocuments("xayn_test_user", {
            count: 10,
          })
          .catch((error) => {
            expect(error.body.kind).to.be("NotEnoughInteractions");
            done();
          });
      });
    });
  });
});
